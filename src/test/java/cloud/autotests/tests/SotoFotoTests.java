package cloud.autotests.tests;

import cloud.autotests.helpers.DriverUtils;
import cloud.autotests.pageObject.Account;
import cloud.autotests.pageObject.RegistrationForm;
import com.codeborne.selenide.WebDriverRunner;
import com.codeborne.selenide.commands.FindAll;
import com.github.javafaker.Faker;
import io.qameta.allure.Description;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.openqa.selenium.Dimension;

import java.util.Locale;

import static cloud.autotests.helpers.TestData.*;
import static com.codeborne.selenide.Condition.*;
import static com.codeborne.selenide.Configuration.baseUrl;
import static com.codeborne.selenide.Selectors.*;
import static com.codeborne.selenide.Selenide.*;
import static io.qameta.allure.Allure.step;
import static jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle.title;
import static org.assertj.core.api.Assertions.assertThat;


public class SotoFotoTests extends TestBase {
    @Test
    @Description("Soon to be implemented by you (or QA.GURU engineers)")
    @DisplayName("Поиск")
    void searchTest() {
        step("открыть https://sotofoto.ru/", () ->
                open(baseUrl));

        step("в поле поиска ввести \"Sumsung\"", () ->
                $(byName("search")).setValue("Sumsung").pressEnter());

        step("Убедится что открылась станица с выдачей Sumsung", () ->
                $(".page-title").shouldHave(text("sumsung")));
    }

    @Test
    @Description("Autogenerated test")
    @DisplayName("Правильность заголовка страницы")
    void titleTest() {
        step("открыть https://sotofoto.ru/", () ->
                open(baseUrl));

        step("Заголовок страницы содержит текст: 'СотоФото - магазин электроники'", () -> {
            String expectedTitle = "СотоФото - магазин электроники";
            String actualTitle = title();

            assertThat(actualTitle).isEqualTo(expectedTitle);
        });
    }

    @Test
    @Description("Autogenerated test")
    @DisplayName("Журнал логов в консоли не содержит ошибок")
    void consoleShouldNotHaveErrorsTest() {
        step("открыть https://sotofoto.ru/", () ->
                open("https://sotofoto.ru/"));

        step("Журнал логов в консоли не содержит 'SEVERE'", () -> {
            String consoleLogs = DriverUtils.getConsoleLogs();
            String errorText = "SEVERE";

            assertThat(consoleLogs).doesNotContain(errorText);
        });
    }

    @Test
    @DisplayName("Проверка регистрации")
    void authTest() {
        step("открыть https://sotofoto.ru/", () -> {
            final RegistrationForm registrationForm = new RegistrationForm();
            Account account = new Account();

            open(baseUrl);
        });
        step("Заполнить форму регистрации", () -> {
            registrationForm.clickTitle();
            registrationForm.setFirstNameInput();
            registrationForm.setEmailInput();
            registrationForm.setPasswordInput();
            registrationForm.setPasswordConfirmationInput();
            registrationForm.clickButtonSubmit();
        });

        step("Проверить авторизацию", () -> {
            Account account = new Account();
            account.openAccountPage();
            account.setCheckHeader();
            account.setCheckLogoName();
            account.setCheckLogoEmail();
        });
    }
}
    /*
            $(byLinkText("Регистрация")).click();
            $(byName("name")).setValue("Татьяна");
            $(byName("email")).setValue("1111121116@gmail.com");
            $(byName("password")).setValue("123parol321");
            $(byName("password_confirmation")).setValue("123parol321");
            $("button.btn-block").click();

     */



/*
        $("div.card-header").shouldHave(text("Персональная информация"));

        $("div.card-body").$(byName("name")).shouldHave(value(firstname));
        $("div.card-body").$(byName("email")).shouldHave(value(emailAddress));

 */

